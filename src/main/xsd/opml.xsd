<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" xmlns:data-view="http://www.w3.org/2003/g/data-view#">
  <xs:import namespace="http://www.w3.org/2003/g/data-view#" schemaLocation="data-view.xsd"/>
  <xs:element name="opml">
    <xs:complexType>
      <xs:choice>
        <xs:sequence>
          <xs:element ref="head"/>
          <xs:element name="body">
            <xs:complexType>
              <xs:group ref="onode1"/>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:sequence>
          <xs:element ref="head"/>
          <xs:element name="body">
            <xs:complexType>
              <xs:group maxOccurs="unbounded" ref="onode2"/>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
      </xs:choice>
      <xs:attribute ref="data-view:transformation"/>
      <xs:attribute name="version" use="required">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="1.0"/>
            <xs:enumeration value="1.1"/>
            <xs:enumeration value="2.0"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="head">
    <xs:complexType>
      <xs:all>
        <xs:element minOccurs="0" ref="title"/>
        <xs:element minOccurs="0" ref="dateCreated"/>
        <xs:element minOccurs="0" ref="dateModified"/>
        <xs:element minOccurs="0" ref="ownerName"/>
        <xs:element minOccurs="0" ref="ownerEmail"/>
        <xs:element minOccurs="0" ref="ownerId"/>
        <xs:element minOccurs="0" ref="docs"/>
        <xs:element minOccurs="0" ref="expansionState"/>
        <xs:element minOccurs="0" ref="vertScrollState"/>
        <xs:element minOccurs="0" ref="windowTop"/>
        <xs:element minOccurs="0" ref="windowBottom"/>
        <xs:element minOccurs="0" ref="windowLeft"/>
        <xs:element minOccurs="0" ref="windowRight"/>
      </xs:all>
    </xs:complexType>
  </xs:element>
  <xs:element name="title" type="xs:string">
    <xs:annotation>
      <xs:documentation>The title of the document.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="dateCreated" type="rfc_822_opml_rx">
    <xs:annotation>
      <xs:documentation>A date-time, indicating when the document was created.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="dateModified" type="rfc_822_opml_rx">
    <xs:annotation>
      <xs:documentation>A date-time, indicating when the document was last modified.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="ownerName" type="xs:string">
    <xs:annotation>
      <xs:documentation>The owner of the document.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="ownerEmail" type="xs:string">
    <xs:annotation>
      <xs:documentation>The email address of the owner of the document.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="ownerId" type="xs:anyURI">
    <xs:annotation>
      <xs:documentation>The HTTP address of a web page that contains a form that allows a human reader to communicate with the author of the document via email or other means. The linked page may contain link elements pointing to other documents containing information about the owner.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="docs" type="xs:anyURI">
    <xs:annotation>
      <xs:documentation>The HTTP address of documentation for the format used in the OPML file. It's probably a pointer to this page for people who might stumble across the file on a web server 25 years from now and wonder what it is.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="expansionState">
    <xs:annotation>
      <xs:documentation>A comma-separated list of line numbers that are expanded. The line numbers in the list tell you which headlines to expand. The order is important. For each element in the list, X, starting at the first summit, navigate flatdown X times and expand. Repeat for each element in the list.</xs:documentation>
    </xs:annotation>
    <xs:simpleType>
      <xs:union memberTypes="commasep">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:length value="0"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:union>
    </xs:simpleType>
  </xs:element>
  <xs:element name="vertScrollState" type="xs:int">
    <xs:annotation>
      <xs:documentation>A number, saying which line of the outline is displayed on the top line of the window. This number is calculated with the expansion state already applied.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="windowTop" type="xs:int">
    <xs:annotation>
      <xs:documentation>The pixel location of the top edge of the window.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="windowBottom" type="xs:int">
    <xs:annotation>
      <xs:documentation>The pixel location of the bottom edge of the window.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="windowLeft" type="xs:int">
    <xs:annotation>
      <xs:documentation>The pixel location of the left edge of the window.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:element name="windowRight" type="xs:int">
    <xs:annotation>
      <xs:documentation>The pixel location of the right edge of the window.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:attributeGroup name="sharedatts">
    <xs:attribute name="text" use="required" type="xs:string">
      <xs:annotation>
        <xs:documentation>Every outline element must have at least a text attribute, which is what is displayed when an outliner opens the OPML file</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="isComment">
      <xs:annotation>
        <xs:documentation>Indicates whether the outline is commented or not. By convention if an outline is commented, all subordinate outlines are considered to also be commented. If it's not present, the value is false.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="true"/>
          <xs:enumeration value="false"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="isBreakpoint">
      <xs:annotation>
        <xs:documentation>Indicates whether a breakpoint is set on this outline. This attribute is mainly necessary for outlines used to edit scripts. If it's not present, the value is false.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="true"/>
          <xs:enumeration value="false"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="category">
      <xs:annotation>
        <xs:documentation>A string of comma-separated slash-delimited category strings, in the format defined by the RSS 2.0 category element. To represent a "tag," the category string should contain no slashes.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="created" type="rfc_822_opml_rx">
      <xs:annotation>
        <xs:documentation>The date and time that the outline node was created. Follows RFC 822 (eg. "Sat, 09 Apr 2007 14:57:36 GMT").</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:group name="onode1">
    <xs:sequence>
      <xs:element name="outline">
        <xs:complexType>
          <xs:group minOccurs="0" maxOccurs="unbounded" ref="onode1"/>
          <xs:attributeGroup ref="sharedatts"/>
          <xs:attribute name="type">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="link"/>
                <xs:enumeration value="rss"/>
                <xs:enumeration value="song"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name="url" type="xs:string"/>
          <xs:attribute name="version">
            <xs:annotation>
              <xs:documentation>Varies depending on the version of RSS that's being supplied.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="RSS"/>
                <xs:enumeration value="RSS2"/>
                <xs:enumeration value="RSS1"/>
                <xs:enumeration value="scriptingNews"/>
                <xs:enumeration value="atom"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name="language" type="xs:string">
            <xs:annotation>
              <xs:documentation>The value of the top-level language element from the feed.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Contains the top-level title element from the feed.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="htmlUrl" type="xs:anyURI">
            <xs:annotation>
              <xs:documentation>The top-level link element from the RSS feed.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="xmlUrl" type="xs:anyURI">
            <xs:annotation>
              <xs:documentation>The HTTP address of the RSS feed.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="f" type="xs:string">
            <xs:annotation>
              <xs:documentation>The file that contains the MP3 on the local hard drive.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ctPlays" type="xs:string">
            <xs:annotation>
              <xs:documentation>The number of times the song has been played.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ctSeconds" type="xs:duration">
            <xs:annotation>
              <xs:documentation>The duration of the song, defined by a heuristic that's pretty accurate. ;-&gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="whenFirstPlayed" type="rfc_822_opml_rx">
            <xs:annotation>
              <xs:documentation>The time/date the song was played for the first time.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="whenLastPlayed" type="rfc_822_opml_rx">
            <xs:annotation>
              <xs:documentation>The time/date that the song was played most recently.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="whenLoaded">
            <xs:annotation>
              <xs:documentation>The time/date that Radio UserLand discovered the file in your MP3 folder.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <xs:group name="onode2">
    <xs:sequence>
      <xs:element name="outline">
        <xs:complexType>
          <xs:group minOccurs="0" maxOccurs="unbounded" ref="onode2"/>
          <xs:attributeGroup ref="sharedatts"/>
          <xs:attribute name="type">
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="link"/>
                <xs:enumeration value="rss"/>
                <xs:enumeration value="include"/>
                <xs:enumeration value="song"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name="url">
            <xs:simpleType>
              <xs:union memberTypes="xs:string xs:anyURI"/>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name="version">
            <xs:annotation>
              <xs:documentation>Varies depending on the version of RSS that's being supplied.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
              <xs:restriction base="xs:string">
                <xs:enumeration value="RSS"/>
                <xs:enumeration value="RSS2"/>
                <xs:enumeration value="RSS1"/>
                <xs:enumeration value="scriptingNews"/>
                <xs:enumeration value="atom"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name="language" type="xs:string">
            <xs:annotation>
              <xs:documentation>The value of the top-level language element from the feed.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="title" type="xs:string">
            <xs:annotation>
              <xs:documentation>Contains the top-level title element from the feed.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="htmlUrl" type="xs:anyURI">
            <xs:annotation>
              <xs:documentation>The top-level link element from the RSS feed.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="xmlUrl" type="xs:anyURI">
            <xs:annotation>
              <xs:documentation>The HTTP address of the RSS feed.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="f" type="xs:string">
            <xs:annotation>
              <xs:documentation>The file that contains the MP3 on the local hard drive.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ctPlays" type="xs:string">
            <xs:annotation>
              <xs:documentation>The number of times the song has been played.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ctSeconds" type="xs:duration">
            <xs:annotation>
              <xs:documentation>The duration of the song, defined by a heuristic that's pretty accurate. ;-&gt;</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="whenFirstPlayed" type="rfc_822_opml_rx">
            <xs:annotation>
              <xs:documentation>The time/date the song was played for the first time.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="whenLastPlayed" type="rfc_822_opml_rx">
            <xs:annotation>
              <xs:documentation>The time/date that the song was played most recently.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="whenLoaded">
            <xs:annotation>
              <xs:documentation>The time/date that Radio UserLand discovered the file in your MP3 folder.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:group>
  <xs:attributeGroup name="weblink">
    <xs:attribute name="type" use="required">
      <xs:annotation>
        <xs:documentation>A string which says how other attributes are to be interpreted. OPML can also be extended by the addition of new values for the type attribute.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="link"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="url" use="required" type="xs:string"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="rsslink">
    <xs:attribute name="type" use="required">
      <xs:annotation>
        <xs:documentation>A string which says how other attributes are to be interpreted. OPML can also be extended by the addition of new values for the type attribute.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="rss"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="version">
      <xs:annotation>
        <xs:documentation>Varies depending on the version of RSS that's being supplied.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="RSS"/>
          <xs:enumeration value="RSS2"/>
          <xs:enumeration value="RSS1"/>
          <xs:enumeration value="scriptingNews"/>
          <xs:enumeration value="atom"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="language" type="xs:string">
      <xs:annotation>
        <xs:documentation>The value of the top-level language element from the feed.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="title" type="xs:string">
      <xs:annotation>
        <xs:documentation>Contains the top-level title element from the feed.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="htmlUrl" use="required" type="xs:anyURI">
      <xs:annotation>
        <xs:documentation>The top-level link element from the RSS feed.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="xmlUrl" type="xs:anyURI">
      <xs:annotation>
        <xs:documentation>The HTTP address of the RSS feed.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="include">
    <xs:attribute name="type" use="required">
      <xs:annotation>
        <xs:documentation>A string which says how other attributes are to be interpreted. OPML can also be extended by the addition of new values for the type attribute.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="include"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="url" use="required" type="xs:anyURI"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="song">
    <xs:attribute name="type" use="required">
      <xs:annotation>
        <xs:documentation>A string which says how other attributes are to be interpreted. OPML can also be extended by the addition of new values for the type attribute.</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="song"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="f" type="xs:string">
      <xs:annotation>
        <xs:documentation>The file that contains the MP3 on the local hard drive.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ctPlays" type="xs:string">
      <xs:annotation>
        <xs:documentation>The number of times the song has been played.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ctSeconds" type="xs:duration">
      <xs:annotation>
        <xs:documentation>The duration of the song, defined by a heuristic that's pretty accurate. ;-&gt;</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="whenFirstPlayed" type="rfc_822_opml_rx">
      <xs:annotation>
        <xs:documentation>The time/date the song was played for the first time.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="whenLastPlayed" type="rfc_822_opml_rx">
      <xs:annotation>
        <xs:documentation>The time/date that the song was played most recently.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="whenLoaded">
      <xs:annotation>
        <xs:documentation>The time/date that Radio UserLand discovered the file in your MP3 folder.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:simpleType name="commasep">
    <xs:restriction base="xs:string">
      <xs:pattern value="[\-+]?(\d+|\d+(\.\d+)?%)(,\s?(\d+|\d+(\.\d+)?%))*"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="rfc_822_opml_rx">
    <xs:restriction base="xs:string">
      <xs:pattern value="^((Mon|Tue|Wed|Thur|Fri|Sat|Sun), )?(\d+) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{2,4}) (\d{2}):(\d{2})(:(\d{2})?) (\S{1,4}|(\+|\-)\d{4})$"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>
